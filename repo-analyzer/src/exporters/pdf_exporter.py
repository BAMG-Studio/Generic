"""PDF report exporter"""
from pathlib import Path
from typing import Dict, Any
from datetime import datetime

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.enums import TA_CENTER, TA_LEFT
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False


class PDFExporter:
    """Export analysis results to PDF format"""
    
    def __init__(self, output_dir: str, repo_name: str):
        """
        Initialize PDF exporter
        
        Args:
            output_dir: Output directory path
            repo_name: Repository name
        """
        self.output_dir = Path(output_dir)
        self.repo_name = repo_name
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def export(self, results: Dict[str, Any]) -> str:
        """
        Export results to PDF file
        
        Args:
            results: Analysis results dictionary
            
        Returns:
            Path to exported file
        """
        output_file = self.output_dir / f"{self.repo_name}_report.pdf"
        
        if not REPORTLAB_AVAILABLE:
            # Fallback: create simple text PDF
            self._create_simple_pdf(output_file, results)
        else:
            self._create_detailed_pdf(output_file, results)
        
        return str(output_file)
    
    def _create_simple_pdf(self, output_file: Path, results: Dict[str, Any]):
        """Create simple text-based PDF when reportlab not available"""
        repo = results.get('repository', {})
        sbom = results.get('sbom', {})
        cost = results.get('cost_analysis', {})
        
        content = f"""
REPOSITORY ANALYSIS REPORT
{'=' * 60}

Repository: {repo.get('name', 'Unknown')}
URL: {repo.get('url', 'N/A')}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

SUMMARY
{'=' * 60}

Total Dependencies: {sbom.get('total_dependencies', 0)}
Total Commits: {cost.get('total_commits', 0)}
Total Contributors: {cost.get('total_contributors', 0)}

Project Types: {', '.join(sbom.get('project_types', ['unknown']))}
Package Managers: {', '.join(sbom.get('package_managers', ['none']))}

COST ANALYSIS
{'=' * 60}

Estimated LOC: {cost.get('estimated_loc', 0):,}
Estimated Hours: {cost.get('estimated_hours', 0):,.2f}
Hourly Rate: ${cost.get('hourly_rate', 0):.2f}
Total Estimated Cost: ${cost.get('estimated_cost', 0):,.2f}

Cost per Dependency: ${cost.get('cost_per_dependency', 0):.2f}
Commits per Dependency: {cost.get('commits_per_dependency', 0):.2f}

CORRELATION
{'=' * 60}

Dependencies:Commits Ratio = {sbom.get('total_dependencies', 0)}:{cost.get('total_commits', 0)}

This represents the relationship between code reuse (dependencies)
and development effort (commits), providing insight into the project's
development efficiency and dependency management strategy.

---
Generated by Universal Repository Analyzer v2.0.0
"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def _create_detailed_pdf(self, output_file: Path, results: Dict[str, Any]):
        """Create detailed PDF using reportlab"""
        doc = SimpleDocTemplate(str(output_file), pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#667eea'),
            alignment=TA_CENTER
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            textColor=colors.HexColor('#667eea'),
            spaceAfter=12
        )
        
        # Extract data
        repo = results.get('repository', {})
        sbom = results.get('sbom', {})
        cost = results.get('cost_analysis', {})
        
        # Title
        title = Paragraph("Repository Analysis Report", title_style)
        story.append(title)
        story.append(Spacer(1, 0.3*inch))
        
        # Repository info
        repo_name = Paragraph(f"<b>{repo.get('name', 'Unknown')}</b>", styles['Heading2'])
        story.append(repo_name)
        story.append(Paragraph(f"URL: {repo.get('url', 'N/A')}", styles['Normal']))
        story.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
        
        # Summary section
        story.append(Paragraph("Summary", heading_style))
        
        summary_data = [
            ['Metric', 'Value'],
            ['Total Dependencies', f"{sbom.get('total_dependencies', 0)}"],
            ['Total Commits', f"{cost.get('total_commits', 0):,}"],
            ['Total Contributors', f"{cost.get('total_contributors', 0)}"],
            ['Estimated Cost', f"${cost.get('estimated_cost', 0):,.2f}"],
            ['Estimated Hours', f"{cost.get('estimated_hours', 0):,.2f}"],
        ]
        
        summary_table = Table(summary_data, colWidths=[3*inch, 3*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#667eea')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 0.3*inch))
        
        # Correlation insight
        story.append(Paragraph("Dependencies → Commits → Cost Correlation", heading_style))
        correlation_text = f"""
        This repository has <b>{sbom.get('total_dependencies', 0)} dependencies</b> developed over 
        <b>{cost.get('total_commits', 0):,} commits</b> by <b>{cost.get('total_contributors', 0)} contributors</b>,
        with an estimated development cost of <b>${cost.get('estimated_cost', 0):,.2f}</b>.
        <br/><br/>
        The ratio of {cost.get('commits_per_dependency', 0):.1f} commits per dependency indicates 
        {'high code reuse' if cost.get('commits_per_dependency', 0) < 10 else 'significant custom development'}.
        """
        story.append(Paragraph(correlation_text, styles['Normal']))
        story.append(Spacer(1, 0.3*inch))
        
        # Cost Analysis
        story.append(Paragraph("Cost Analysis (COCOMO II)", heading_style))
        
        cost_data = [
            ['Metric', 'Value'],
            ['Estimated LOC', f"{cost.get('estimated_loc', 0):,}"],
            ['Estimated KLOC', f"{cost.get('estimated_kloc', 0):.2f}"],
            ['Effort (months)', f"{cost.get('effort_months', 0):.2f}"],
            ['Hourly Rate', f"${cost.get('hourly_rate', 0):.2f}"],
            ['Cost per Dependency', f"${cost.get('cost_per_dependency', 0):.2f}"],
        ]
        
        cost_table = Table(cost_data, colWidths=[3*inch, 3*inch])
        cost_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#667eea')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(cost_table)
        
        # Build PDF
        doc.build(story)
