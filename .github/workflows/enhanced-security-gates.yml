name: 🛡️ Enhanced Security Gates

on:
  workflow_dispatch:
    inputs:
      fail_on_severity:
        description: 'Fail pipeline on security findings'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: choice
        options:
          - 'development'
          - 'staging'
          - 'production'
  workflow_call:
    inputs:
      fail_on_severity:
        required: false
        default: false
        type: boolean
      environment:
        required: false
        default: 'development'
        type: string
    secrets: inherit

env:
  # DRY environment variables
  REPOSITORY_NAME: ${{ github.repository }}
  FAIL_ON_SECURITY: ${{ inputs.fail_on_severity || 'false' }}
  TARGET_ENV: ${{ inputs.environment || 'development' }}
  
concurrency:
  group: security-gates-${{ github.ref }}-${{ inputs.environment || 'development' }}
  cancel-in-progress: true

jobs:
  # Security scanning with enhanced error handling
  security-scanning:
    name: 🔍 Multi-Tool Security Scanning
    runs-on: ubuntu-latest
    outputs:
      kics-results: ${{ steps.kics.outputs.results }}
      security-passed: ${{ steps.evaluate.outputs.passed }}
    
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🛡️ KICS Security Scan
        id: kics
        run: |
          # Download and install KICS
          curl -sfL https://raw.githubusercontent.com/Checkmarx/kics/master/install.sh | sh
          
          # Run KICS scan with comprehensive configuration
          ./bin/kics scan \
            --path . \
            --report-formats json,sarif \
            --output-path kics-results \
            --ignore-on-exit results \
            --verbose || true
          
          # Process results based on environment
          if [[ "${{ env.TARGET_ENV }}" == "production" ]]; then
            SEVERITY_THRESHOLD="HIGH"
          else
            SEVERITY_THRESHOLD="CRITICAL"
          fi
          
          echo "severity-threshold=$SEVERITY_THRESHOLD" >> $GITHUB_OUTPUT
          
      - name: 📊 Evaluate Security Results
        id: evaluate
        run: |
          # Determine if pipeline should fail based on environment and settings
          SHOULD_FAIL="false"
          
          if [[ "${{ env.FAIL_ON_SECURITY }}" == "true" && "${{ env.TARGET_ENV }}" == "production" ]]; then
            # Check for HIGH/CRITICAL findings in production
            if [ -f "kics-results/results.json" ] && jq -e '.results[] | select(.severity == "HIGH" or .severity == "CRITICAL")' kics-results/results.json >/dev/null 2>&1; then
              SHOULD_FAIL="true"
            fi
          fi
          
          echo "passed=$([[ $SHOULD_FAIL == 'false' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          
          if [[ $SHOULD_FAIL == "true" ]]; then
            echo "🚨 Security issues found that require attention"
            exit 1
          else
            echo "✅ Security validation passed for ${{ env.TARGET_ENV }} environment"
          fi

  # Test execution with proper dependency management
  test-execution:
    name: 🧪 Test Suite Execution
    runs-on: ubuntu-latest
    needs: security-scanning
    if: always()
    
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🧪 Run Security Compliance Tests
        run: |
          pytest tests/test_security_compliance.py -v --tb=short
          
      - name: 📊 Test Results Summary
        if: always()
        run: |
          echo "✅ Test execution completed for ${{ env.TARGET_ENV }} environment"