"""HTML Reporter - Author: Peter"""
from pathlib import Path

class HTMLReporter:
    TEMPLATE = """<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>ForgeTrace Audit Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #3498db; color: white; }
        tr:hover { background: #f5f5f5; }
        .summary { background: #ecf0f1; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .metric { display: inline-block; margin: 10px 20px 10px 0; }
        .metric-label { font-weight: bold; color: #7f8c8d; }
        .metric-value { font-size: 24px; color: #2c3e50; }
        .origin-third_party { color: #27ae60; }
        .origin-foreground { color: #e74c3c; }
        .origin-background { color: #f39c12; }
        footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #7f8c8d; font-size: 12px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ForgeTrace Audit Report</h1>
        <p><strong>Generated by:</strong> Peter Kolawole, BAMG Studio LLC</p>
        
        <div class="summary">
            <h2>Executive Summary</h2>
            <div class="metric">
                <div class="metric-label">Total LOC</div>
                <div class="metric-value">{{ cost.total_loc|default(0)|int|format_number }}</div>
            </div>
            <div class="metric">
                <div class="metric-label">Foreground LOC</div>
                <div class="metric-value">{{ cost.foreground_loc|default(0)|int|format_number }}</div>
            </div>
            <div class="metric">
                <div class="metric-label">Estimated Cost</div>
                <div class="metric-value">${{ cost.estimated_cost_usd|default(0)|round(2)|format_number }}</div>
            </div>
            <div class="metric">
                <div class="metric-label">Estimated Days</div>
                <div class="metric-value">{{ cost.estimated_days|default(0)|round(1) }}</div>
            </div>
        </div>
        
        <h2>IP Classification</h2>
        <table>
            <thead>
                <tr>
                    <th>Module</th>
                    <th>Origin</th>
                    <th>License</th>
                    <th>Rewriteable</th>
                    <th>Score</th>
                    <th>LOC</th>
                </tr>
            </thead>
            <tbody>
                {% for filepath, data in classifications.items() %}
                {% if loop.index <= 100 %}
                <tr>
                    <td>{{ filepath|basename }}</td>
                    <td class="origin-{{ data.origin }}">{{ data.origin }}</td>
                    <td>{{ data.license|default('none') }}</td>
                    <td>{{ 'Yes' if rewriteability.get(filepath, {}).get('rewriteable', False) else 'No' }}</td>
                    <td>{{ rewriteability.get(filepath, {}).get('score', 0)|round(2) }}</td>
                    <td>{{ rewriteability.get(filepath, {}).get('loc', 0) }}</td>
                </tr>
                {% endif %}
                {% endfor %}
            </tbody>
        </table>
        
        <h2>Secrets & Security</h2>
        <p>Secrets found: {{ secrets.count|default(0) }}</p>
        <p>SAST findings: {{ sast.count|default(0) }}</p>
        
        <footer>
            <p><em>Not legal advice. Consult counsel.</em></p>
            <p>ForgeTrace (Repo-Analyser) v0.1.0</p>
        </footer>
    </div>
</body>
</html>"""
    
    def __init__(self, findings, output_dir, config):
        self.findings = findings
        self.output_dir = Path(output_dir)
        self.config = config
        
    def generate(self):
        output_file = self.output_dir / "report.html"
        
        # Create environment and add custom filters
        from jinja2 import Environment
        env = Environment()
        env.filters['format_number'] = lambda x: f"{int(x):,}" if x else "0"
        env.filters['basename'] = lambda x: Path(x).name
        
        template = env.from_string(self.TEMPLATE)
        
        html = template.render(
            classifications=self.findings.get("classification", {}),
            rewriteability=self.findings.get("rewriteability", {}),
            cost=self.findings.get("cost_estimate", {}),
            secrets=self.findings.get("secrets", {}),
            sast=self.findings.get("sast", {})
        )
        
        output_file.write_text(html)
